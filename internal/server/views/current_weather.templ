package views

import (
	"fmt"
	"github.com/maximekuhn/metego/internal/weather"
	"log/slog"
)

templ CurrentWeather(city string) {
	// get current weather every 10 minutes
	<div hx-get={ fmt.Sprintf("/api/weather/current?city=%s", city) } hx-trigger="load, every 600s" hx-swap="innerHTML" id="current-weather-container">
		@CurrentWeatherComp(nil)
	</div>
}

templ CurrentWeatherComp(current *weather.CurrentWeather) {
	if current != nil {
		<div id="current-weather-card">
			@CurrentWeatherCard(imagePath(current.Icon), imageAlt(current.Icon), current.Description, current.Temp)
		</div>
	} else {
		<div>
			<p>Oops ... :/</p>
		</div>
	}
}

templ CurrentWeatherCard(imgPath, imgAlt, description string, temperature float64) {
	<div id="current-weather-card-img-temp">
		<div id="current-weather-card-img">
			<img src={ imgPath } alt={ imgAlt }/>
		</div>
		<div id="current-weather-card-temperature">
			<span>{ fmt.Sprintf("%.1f °C", temperature) }</span>
		</div>
	</div>
	<div id="current-weather-card-description">
		<span>{ description }</span>
	</div>
}

templ CurrentWeatherIcon(path, alt string) {
	<img src={ path } alt={ alt }/>
}

func imagePath(icon weather.CurrentWeatherIcon) string {
	switch icon {
	case weather.IconClearSky:
		return "static/images/weather_icons/clear_sky.png"
	case weather.IconFewClouds:
		return "static/images/weather_icons/few_clouds.png"
	case weather.IconScatteredClouds:
		return "static/images/weather_icons/few_clouds.png"
	case weather.IconBrokenClouds:
		return "static/images/weather_icons/clouds.png"
	case weather.IconShowerRain:
		return "static/images/weather_icons/rain.png"
	case weather.IconRain:
		return "static/images/weather_icons/rain.png"
	case weather.IconThunderstorm:
		return "static/images/weather_icons/thunderstorm.png"
	case weather.IconSnow:
		return "static/images/weather_icons/snow.png"
	case weather.IconMist:
		return "static/images/weather_icons/clouds.png"
	case weather.IconNightClearSky:
		return "static/images/weather_icons/clear_sky.png"
	case weather.IconNightFewClouds:
		return "static/images/weather_icons/few_clouds.png"
	case weather.IconNightScatteredClouds:
		return "static/images/weather_icons/few_clouds.png"
	case weather.IconNightBrokenClouds:
		return "static/images/weather_icons/clouds.png"
	case weather.IconNightShowerRain:
		return "static/images/weather_icons/rain.png"
	case weather.IconNightRain:
		return "static/images/weather_icons/rain.png"
	case weather.IconNightThunderstorm:
		return "static/images/weather_icons/thunderstorm.png"
	case weather.IconNightSnow:
		return "static/images/weather_icons/snow.png"
	case weather.IconNightMist:
		return "static/images/weather_icons/clouds.png"
	}
	slog.Warn("imagePath(): unknown icon")
	return ""
}

func imageAlt(icon weather.CurrentWeatherIcon) string {
	switch icon {
	case weather.IconClearSky:
		return "ciel dégagé"
	case weather.IconFewClouds:
		return "quelques nuages"
	case weather.IconScatteredClouds:
		return "nuages dispersés"
	case weather.IconBrokenClouds:
		return "nuageux"
	case weather.IconShowerRain:
		return "averses pluvieuses"
	case weather.IconRain:
		return "pluie"
	case weather.IconThunderstorm:
		return "orage"
	case weather.IconSnow:
		return "neige"
	case weather.IconMist:
		return "brume"
	case weather.IconNightClearSky:
		return "ciel dégagé"
	case weather.IconNightFewClouds:
		return "quelques nuages"
	case weather.IconNightScatteredClouds:
		return "nuages dispersés"
	case weather.IconNightBrokenClouds:
		return "nuageux"
	case weather.IconNightShowerRain:
		return "averses pluvieuses"
	case weather.IconNightRain:
		return "pluie"
	case weather.IconNightThunderstorm:
		return "orage"
	case weather.IconNightSnow:
		return "neige"
	case weather.IconNightMist:
		return "brume"
	}
	slog.Warn("imageAlt(): unknown icon")
	return "unknown icon"
}
